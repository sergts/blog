{
  
    
        "post0": {
            "title": "Quantum and classical neural networks for Max-Cut (DRAFT)",
            "content": "Introduction . Both deep learning and quantum computing have been making the headlines in the recent past - these two topics are seen as &quot;the big things&quot; in computer science. But while deep learning has already delivered a lot, and the question here is: &quot;how far can we go?&quot;, the field of quantum computing is still waiting for its quantum-capable hardware - there is a lot more theory in the field describing algorithms that could do cool things, that are otherwise difficult for classical computers. . At the intersection of machine learning and quantum computing, there exists the field of quantum machine learning, which encompasses two main goals: analyzing quantum data (physics experiments, etc...) and implementing machine learning on quantum hardware. Recently, there has been as increasing research into the quantum analogue of neural networks - parameterized quantum cirquits, which are also called quantum neural networks. Unfortunately, at the present moment it does not seem that quantum neural networks can be of use for classical deep learning problems, their main application is for data that could have some quantum properties. One of the very few exceptions to this that I have found is the maximum cut graph problem. . MaxCut problem . The problem of maximum cut can be stated as follows: we want to find set of nodes $S$ such that the number or the weight of all edges coming from $S$ to $ overline{S}$, which specifies the cut $S: overline{S}$, is maximal. . Below is a random cut of a 10-node graph: yellow and purple nodes belong to different cut partitions, red edges define the cut. . #collapse-hide def draw_cut(graph, cut): ncolors = [] for n in graph.nodes: if n in cut: ncolors.append(0) else: ncolors.append(1) ecolors = [] for e in graph.edges: if (e[0] in cut and e[1] not in cut) or (e[0] not in cut and e[1] in cut): ecolors.append(&#39;red&#39;) else: ecolors.append(&#39;black&#39;) fig, ax = plt.subplots(1, 1, figsize=(8, 6)); nx.draw_networkx(graph, ax=ax, node_color=ncolors, edge_color=ecolors, with_labels=False) ex_graph = nx.erdos_renyi_graph(n=10,p=0.5) draw_cut(ex_graph, [0,3,7,9]) . . This problem is interesting for this study as it is NP-hard - there is exact no polynomial time algorithm for it. The practical applications where this problem is used inlude network design and theoretical physics. As it turns out, this problem can be also stated in the terms of physics - the so called Ising model - which then can be neatly mapped to a quantum circuit. . Graph Neural Networks . Even at the first glance, the naive apprach from supervised deep learning - using graph matrix as input and maximum cuts as output, should not work: firstly, there can be many maximum-cuts, finding them for large graphs is a problem on itself, and a simple neural network will not exploit the relational properties between the nodes, which is important for a graph. . In order to exploit the relational structure of a graph, different methods are known: one can employ techniques from convolutional neural networks or recurrent neural networks. Additionally, for each node (or edge) we want to create some informative embedding. . The image below demonstrates an idea behind graph (convolutional) networks - we look at each node and their neighbours using shared parameters, similarly to how convolution filters works in CNNs. . . If you want to know more, you can watch this video for the introduction to the topic. . Quantum Computing . Below is an image of a Block sphere. If we take the upwards direction as qubit zero (or ket zero $|0 rangle$, as quantum scientists call it) and downwards as ket one $|1 rangle$, then a qubit can be anything on the surphace of this unit sphere, for example the green arrow represents a qubit that is in some superposition of $|0 rangle$ and $|1 rangle$. However, we cannot access the state of a qubit directly, instead we would need to perform a measurement operation, that would give us either zero or one in a classical bit. . #collapse-hide bloch_sphere = Bloch() bloch_sphere.add_vectors([-1/np.sqrt(3),1/np.sqrt(3),1/np.sqrt(3)]) bloch_sphere.show() bloch_sphere.clear() . . A quantum circuit is normally represented as this: there are $n$ qubits, in this case 3, each having their own line, you can apply gates on one or more qubits. Usually at the end of the circuit you perform a measurement and get 3 classical bits of information. Running the circuit multiple times and averaring you can get an estimate of the output value, which is as a rule probabilistic. . The example below is a random 3 qubit circuit composed of: . $Rx$ - rotation about the x axis (check Bloch sphere above) | $Ry$ - rotation about the y axis | $H$ - Hadamard - a superposition gate | $cX$ gate - controlled NOT gate | . #collapse-hide q0, q1, q2 = cirq.GridQubit.rect(1, 3) circuit = cirq.Circuit( ( cirq.rx(0.5).on(q0))**0.5, cirq.ry(0.7).on(q1), cirq.CNOT(control=q0, target=q1), cirq.H(q2),cirq.CNOT(control=q1, target=q2)) SVGCircuit(circuit) . . (0, 0): (0, 1): (0, 2): Rx(0.08π)Ry(0.223π)HXX Quantum Neural Networks . As mentioned previously, a quantum neural network is nothing more than a parameterized quantum circuit. . The image below is of the same quantum circuit, but now it is parameterized by two variables $a, b$ - in essence this is a quantum neural network, you could learn these parameters with respect to some desired output. . #collapse-hide q0, q1, q2 = cirq.GridQubit.rect(1, 3) a, b = sympy.symbols(&#39;a b&#39;) circuit = cirq.Circuit( ( cirq.rx(a).on(q0)), cirq.ry(b).on(q1), cirq.CNOT(control=q0, target=q1), cirq.H(q2),cirq.CNOT(control=q1, target=q2)) SVGCircuit(circuit) . . (0, 0): (0, 1): (0, 2): Rx(a)Ry(b)HXX To get a popular introduction to the topic of Quantum Machine Learning, you can watch this video from Tensorflow Dev Summit: . In general, quantum and classical neural networks can be combined in many different ways, depending on our goals. This scheme from Google demonstrates a hybrid quantum-classical neural network and its basic functionality. . . Quantum neural networks used here will be explored below, under the Methods section. . Methods . Graph NN for MaxCut . For the graph neural network I will use implementation provided by this paper Experimental performance of graph neural networks on random instances of max-cut, as this was actually the only working implementation that I have found. You can consult the paper about the details of how graphs are encoded for the input and what the loss funcion for this problem looks like. . Quantum NN for MaxCut . For the quantum model I will the use implementation provided in Tensorflow Quantum, check chapter IV.C for details. In short, the graph for which we want to find the max-cut is mapped to a parameterized quantum circuit, then the cost function is also represented as a quantum circuit. When appended together this parameterized circuit will sort of describe the energy level of the system, given the parameters, and we will want to minimize the energy. . Parameterized quantum circuit example for MaxCut on 5 node graph . Meta learning QNN . Main drawback of the previous model is that we find parameters only for one specific graph. For this reason the same paper descibes in chapter V.A a meta-learning framework for the QNN. The idea is to use a recurrent neural network to learn the parameter updates based on previous parameter values and the loss. This model should be able to generalize to different graphs and even different graph sizes. . In general, this model is descibed as: . $ theta_{i+1}, h_{i+1} = RNN( theta_{i}, h_{i}, y_{i}) $ . $y_{i} = QNN( theta_{i}) $ . where $ theta_{i}$ is a set of parameters for the QNN (vector with just 2 paramters in this case), $h_{i}$ is the hidden state of the RNN, and $y_i$ is the energy level, or &#39;loss&#39; produced by the QNN. Number of RNN timesteps will be 5. . Experiments . Relatively small graphs will be used (15 nodes), because as it turned out my hardware cannot handle large quantum tensorflow models. On the positive side, during test phase its possible to search over all possible cuts of which there are $2^n$ ($n$ number of nodes) to find the optimum and report the achieved ratio of that optimum. The accuracy of the model will then be averaged ratio of optimum over all test samples. . Generating random graphs . Graphs for training and testing will be generated using an Erdos-Renyi random graph model with different parameters, to see if the graph structure has any effect on the performance. The paramter $p$ of Erodos-Renyi model descibes the probability of an edge being included in the graph. . Erdos-renyi random graph with p=0.7 . Erdos-renyi random graph with p=0.3 . Results . Accuracy of Max-Cut prediction . &lt;ggplot: (-9223371930495197928)&gt; . Interestingly, when I first run the experiments I was a little bit surprised that all models performed better for graphs with more edges. However, evaluating the expectation for a random cut has shown where this bias comes from. . Thing to notice here are: . The QNN has only 2 parameters and the RNN has 7735, whereas GNN has 80000 | GNN outperforms both alternatives | There appears to be little difference between accruacy of standalone QNN and when used in the meta learning framework with RNN | Results are better than random model | . Dependence of accuracy on the training size . On of the things I noticed during the experiments is that the RNN-QNN does not need many training samples to perform well, so I also decided to test the training set size vs the accuracy of prediction. . &lt;ggplot: (-9223371930501334436)&gt; . Meta learning model appears to benefit little from additional training samples, compared to the graph neural network. I think its possible to speculate, that this is because the QNN itself encodes a lot of knowledge about the problem, but the question is then why does it underperform compared to the GNN. . Conclusion . These results should be taken in the context that practical quantum computers are still far away and all experiments of this sort are done in simulators, so the real cost-benefit analysis between the methods is not possible at the moment. While these results show that the quantum model does not appear better, perhaps further work in the quantum machine learning will yield different results. . Publication of this post has benefitted from the scholarship provided by IT academy http://studyitin.ee . References . https://arxiv.org/abs/1908.05767 . https://arxiv.org/pdf/2003.02989.pdf . https://github.com/tensorflow/quantum/blob/research/metalearning_qaoa/metalearning_qaoa.ipynb . https://github.com/tensorflow/quantum/blob/research/qaoa/qaoa.ipynb . https://github.com/ElainaYao/maxCut .",
            "url": "https://sergts.github.io/blog/gnn/qnn/2020/06/14/qnn-nn-maxcut.html",
            "relUrl": "/gnn/qnn/2020/06/14/qnn-nn-maxcut.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sergts.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sergts.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sergts.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sergts.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}